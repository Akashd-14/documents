
#### Process Management in Linux

## What is Process?
	Process is any program in its excecution. ( excecution of the program)
	It generally takes an input, processes it and gives us the appropriate output.
	An active program which running now on the Operating System is known as the process.
	
## Why Process Management is required-

1)Resource Allocation:
	Process management ensures efficient allocation of system resources like CPU, memory, and I/O devices to various processes, optimizing system performance and preventing resource conflicts.
	Proper resource allocation enhances the overall responsiveness of the system by dynamically adjusting resources based on process requirements.

2) Concurrency:
	Process management enables multiple processes to run simultaneously, improving system utilization and throughput by sharing resources among concurrent processes.
	Effective concurrency control prevents issues like race conditions and deadlocks, ensuring data consistency and reliability.

3)Isolation:
	Isolation in process management ensures that processes operate independently, preventing interference and maintaining system stability.
	This separation safeguards sensitive data and enhances security by limiting the scope of potential process failures.

4) Process Prioritization:
	Process management prioritizes processes based on their importance and urgency, ensuring critical tasks receive more CPU time and resources.
	This prioritization mechanism enhances system responsiveness and user satisfaction by handling high-priority tasks more efficiently.

5)Process Lifecycle:
	Managing the lifecycle of a process involves creating, scheduling, and terminating processes, ensuring smooth transitions between different states.
	Effective lifecycle management improves system reliability and performance by handling process dependencies and resource cleanup.
	
## Types of Processes:

1) Foreground Processes:
	they run on the screen and need input from the user.
	also referred to as interactive processes

2) Background Processes:
	they run in the background and usually do not need user input.
	referred to as non-interactive or automatic processes
	for example: Antivirus.

	Commands-
	
	&		## Starts the command immediately in the background.

	Ctrl+Z	## Stops the job temporarily so that it can be managed.
	
	Ctrl+C	## Can be used to cancel the current interactive job

	bg		## Continues the job that has just been frozen using Ctrl+Z in the background.

	fg		## Brings the last job that was moved to background execution back to the foreground.

	jobs	## Shows which jobs are currently running from current shell. Displays job numbers that can be used as an argument to the command bg and fg.
	
3) Daemon Process-
	It is a type of background process that runs continuously, typically providing system services or performing tasks without direct user interaction even if terminating terminal.
	example- init, crond

4) Parent Process and Child Process-
	The parent process is the process that creates another process.
	A child process is a process that is created by another process, known as its parent process.

	PID-
		Every process in the system is assigned a unique numeric identifier called a Process ID (PID).
		PIDs are used by the operating system to manage and identify processes.
		
		syntax
			echo $$					## It shows current process ID
			pidof <process name>	## find process ID	using process name
			
	PPID-
		The Parent Process ID (PPID) indicates the PID of the parent process that created the current process.
		
		syntax
			echo $PPID				## Shows parent process Id of current process
			
## Process Management Lifecycle

	Following are the States of Process Management Lifecycle-

	1) New/Create:
		The process has been created but has not yet been scheduled for execution.
		During creation, the operating system allocates resources to the process, such as memory space, CPU time, and other necessary resources.
		The operating system assigns a unique identifier to the process known as the Process ID (PID), which is used to manage and identify the process.
	
	2) Ready:
		The process is ready to be executed.
		In this state, the process is ready to execute but is waiting for the CPU to be allocated to it.
		The process may also be waiting for other events, such as I/O operations to complete or signals from other processes.

	3) Running:
		The process is currently being executed.
		In the running state, the process's instructions are executed by the CPU, and it performs its intended tasks.

	4) Waiting:
		The process is waiting for an event to occur, such as the completion of an I/O operation.
	
	5) Terminated:
		Eventually, the process completes its execution or is terminated.
		When a process terminates, it releases the resources it was using, including memory, files, and other system resources.
		The operating system removes the process from its process table and deallocates its resources, marking the end of its lifecycle.
		
	6)Zombie Process:
		Process that has finished its task, but its parent process hasn't yet collected its exit status from the operating system.	
		
		https://private-user-images.githubusercontent.com/97825776/334024926-1dd38ebe-44e8-43f6-af9d-cb0d962e9d39.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjE2Mjc2MDMsIm5iZiI6MTcyMTYyNzMwMywicGF0aCI6Ii85NzgyNTc3Ni8zMzQwMjQ5MjYtMWRkMzhlYmUtNDRlOC00M2Y2LWFmOWQtY2IwZDk2MmU5ZDM5LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzIyVDA1NDgyM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU5Njk2OGFjYmRhZTFlM2FmYmUwNzNmMTkxNmY5NDBmODMzZDA5NzNmMDE2ZjY2MWI1NmM3MDcxMzU3OGFlNTMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0._Cac77roQoQMrpW9yp_g18VaG8Ki0T1t0Hw8amRNovk